


09-14-2024 JS Static & Async Intro

RECAP:

OOP: Object-oreiented programming
OOP Languages: C++. C#, Java
Prototype-based Languages: JavaScript, Python

JS started to implement OOP concepts ES6 by adding classes.

OOP Concepts/Principles 
Encapsulation: making class properties/fields/instance variables/states private and providing getters and setters
Inheritance: this concept ised to build parent-child relationship to increase resuability. Child can use parent properties/constructor/method
Abstraction:it is providing abstract methods (which has no body) and child class must provide the body. 
Polymorphism: One object being ab;e to get into many shapes.


class Book {
    constructor(title, page) {
        this.title = title;
        this.page = page;
    }

    getTitle() {
        return this.title;
    }

    setTitle(newTitle) {
        this.title = newTitle;
    }
};

const book1 = new Book('Amok', 60);

// direct access
book1.title;
book1.page;

book1.title = 'Hello';

// Encapsulation
book1.getTitle()
book1.setTitle('Hello');


Not JS,
// ABSTRACTION: parent abstract calss has abstract methods with no bodies nad child classes must provide bodies to these methods
abstract class Fruit {
    abstract taste(); // no body/implementation
}

class Apple extends Fruit {
    taste() {
        // provide body
    }
}


Polymorphism:
const apple1 = new Apple();

apple1 is an Apple object 
apple1 is a Fruit object 


Prototype: Prototypes are the mechanisms by which JS objects inherit features form one another.

ES6 Classes: ES6 classes are blueprints from where many objects can be instantiated,

Inheritance: Being able to inherit and reuse parent protottpe or class methods-constructors-properties.



static properties and methods cannot be accessed with objects











Synchronous vs Asynchronus 

// Synchronous code
console.log('1');
console.log('2');
console.log('3');

setTimeout(callback, miliseconds); // This is a built-in function used to delay execution of inner callback

setTimeout(() => {
    console.log('Hello');
}, 10000);

// Hello will be logged to console after 10 seconds


3 WAYS TO RESOLVE Asynchronus code
1. callbacks (Before ES6)
2. promises (After ES6)
3. Async-Await (After ES6 and little more improved version of promises)

PROMISE: 
fulfilled
rejected
pending

visit(url): promising to visit the given url
login(username, password): promising login functionality
validated(text): promising to show the expected result



