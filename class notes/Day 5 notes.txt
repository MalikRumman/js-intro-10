






Recap:

Data types
1. Primitives
    -Programmers cannot create primitive data Types
    1. string: text
    2. number: absolute/decimal numbers 
    3. boolean: true/false 
    4. undefined: when varaible decalred but not assigned with a value
    5. null: explicitly stating the absence of data/value 
    6. bigint; large numbers
    7. symbol:

2. Reference types (objects)
    - You are allowed to create your custom objects or reference types 

Arrays: is a collection used to store multiple data which are similar (not necessarily)
Set, Map, List

const arr = [12, 'John', '123', true, null]; // not preffered much to store different data types in an array but still could be

const cities = ['Chicago', 'Rome', 'Berlin', 'Atina' ];

Objects: used to store key-value pairs (properties)

car 
make = 'Volkwagon;
model = 'Jetta'
year = 2022
mileage = 10000
VIN = ''

const car = {
    make: 'volkwagon',
    model: 'Jetta',
    year: 2022,
    mileage: 10000,
    VIN: '12345ABCDE1234567'
}


= vs == vs ===

=       assignment operator

COMPARISON
==          (loose)         checks only values and returns true if they are same value. It does not care about the data type 
===         (strict)        checks both the valeus and types. Returns true if both ar equal, or flase otherwise


3 == '3'        true
3 === '3'       false

GUI - Graphical User Interface



REMAINDER / MODULUES

27 % 6 = 3                      4 * 6 = 24 
104 % 25 = 4
69 % 7 = 6


20 % 5 = 0

3 % 6 = 3

1. If the number on the left of the operator is less than the one on the righ, then the remainder is the left number
    3 % 6 = 3
2. If the number on the left is divisible by the number on the right. then the remainder is always zero,
    100 % 50 = 0
3. If the number on the left is greater than the number on the right, then you will calculate and find the remainder


3 ** - 10 + 25 % 2 + 7
27 - 10 + 25 %2 +7
25 - 10 + 1 + 7
25

ORDER OF OPERATION
-Paranthesis
-Exponent
-multiplication or division
-addition and subtraction


27 / 9 * 3 = 9

3 + (13 - 2 ** 3) / 2
3 + (13 - 8) / 2
3 + 5 / 2
3 + 2.5
5.5


var is an old keyword for variables
2015 - ES6 -> let and const

const pi = 3.14;















